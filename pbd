#!/usr/bin/env python2

# This file is part of pbd.
#
# Copyright (c) 2011 Dustan Bower.
#
# pbd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# pbd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pbd.  If not, see <http://www.gnu.org/licenses/>.

import os
import re
import subprocess
import sys
from time import sleep

import pb


def check_running():
    """
    Check to see if we're already running.

    :return: None

    """

    try:
        _ = subprocess.check_output("pgrep pianobar", shell=True)
    except subprocess.CalledProcessError:
        startup()
        return False

    return True


def startup():
    """
    Start up pianobar and listen for events.

    :return: None

    """

    process = subprocess.Popen(['pianobar'],
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)

    # if necessary, create the tempfile we use to receive information from
    # pianobar
    f = open("/tmp/pbd.tmp", 'w')
    f.close()
    pb.display("And we go...")
    while True:
        output = process.stdout.readline()
        if not output:
            # if pianobar is closed, break
            if process.return_code is not None:
                break
            else:
                sleep(1)  # wait a second for new output
                continue
        process_pianobar_output(output)


def process_pianobar_output(output):
    """
    Process pianobar output and relay it if necessary.  If we have an error,
    we need to notify the user of it.

    :param output: pianobar output
    :return: None

    """

    display = ["We're playing this track because", "Network error:", "Error:"]
    for message in display:
        substring = output.find(message)
        if substring != -1:
            pb.display(output[substring:])


def load_data():
    """
    read data from pianobar

    :return: None
    """

    f = open("/tmp/pbd.tmp", 'r')
    user_input = f.read()
    f.close()
    return pb.datadict(user_input)


def prompt_station():
    """
    prompt user for station

    :return: None
    """

    stations = []
    highest = 0
    regex = re.compile(r"station[0-9]")
    data = load_data()
    for key in data.keys():
        if regex.match(key):
            stations.append(key)
            # slice after the 'station' in the input: 'station11' -> '11'
            if int(key[7::]) > highest:
                highest = int(key[7::])

    known_inputs = []
    for station in range(0, highest + 1):
        known_inputs.append("%s) %s" % (station, data["station%d" % station]))
        
    user_input = pb.prompt(known_inputs, display_prompt="(station) ")
    return user_input


def show_no_dash_args():
    """
    Called from the command line with -h or --help.

    :return: None

    """
    # FIXME: make pb.display() take an end= parameter to allow multiple
    # FIXME: strings to be sent and concatenated until the normal end=
    # FIXME: is received.
    string = """To avoid confusion with - and accidentally disliking songs, \
pbd does not support options beginning with \"-\".  Options \
are prefixed with : instead.
Showing 'pbd :help'."""
    pb.display(string, timeout=10000)
    show_help()


def show_help():
    """
    display help message

    :return: None

    """

    string = ""
    option = False
    for command, description in pb.INPUTS:
        # give the :help input special formatting
        separator = ": " if command[0] != ":" else "     "

        new_line = "%s%s%s\n".format(command, separator, description)

        # Separate options by linefeed.
        if new_line[0] == ":":
            if not option:
                option = True
                string += "\n"
        string += new_line

    pb.display(string, timeout=10000)


def pbd():
    """
    main function, called each time pbd is invoke via hotkey/etc.

    :return: None

    """

    if not check_running():
        return

    try:
        user_input = sys.argv[1].strip()
    except IndexError:
        user_input = None

    # Called with no input, prompt for input
    if not user_input:
        known_inputs = [(x[0] + " ").strip() for x in pb.INPUTS]
        user_input = pb.prompt(known_inputs, delay=0)
    elif user_input[0] == '-' and user_input not in ["-", "--"]:
        show_no_dash_args()
        return

    # drop unimplemented inputs to avoid unresponsiveness
    unimplemented = ['b', 'c', 'd', 'g', 'h', 'j', 'm', 'r', 'u', 'x']

    if user_input in unimplemented:
        return

    # prompt for station if no station specified, otherwise switch to
    # selected station
    if user_input == "s":
        user_input = ":station"
    elif user_input[0] == "s":
        regex = re.compile(r"s[0-9]")
        if regex.match(user_input):
            os.system("echo '%s' > ~/.config/pianobar/ctl" % user_input+'\n')
        return

    # convert unknown commands into help commands
    try:
        initial_character = user_input[0]
    except IndexError:
        initial_character = user_input = "?"

    # pass basic commands directly to pianobar
    if initial_character not in [':', '?']:
        if user_input == "q":
            # display song lyrics on quit for no good reason
            pb.display("Our steps so silent...")
        os.system("echo -n '%s' > ~/.config/pianobar/ctl" % user_input)

    # handle pbd-specific options
    elif initial_character == ":":
        # parse args
        if user_input == ":help":
            show_help()
        if user_input == ":station":
            station_number = None
            station = prompt_station()
            try:
                station_number = station.split(")", 1)[0]
            except AttributeError:
                pass
            print(station, station_number)
            os.system("echo '%s' > ~/.config/pianobar/ctl" %
                      ("s"+str(station_number)))
            return
    else:
        data = load_data()
        try:
            argument = user_input[1::]
        except IndexError:
            argument = None

        # display song info by default
        if not argument or initial_character == "?":
            pb.display("%s - %s" % (data['artist'], data['title']),
                       heading="[%s]" % data['stationName'])


if __name__ == "__main__":
    pbd()
